import json
import os
from neo4j import GraphDatabase
from typing import List, Dict

# --- ‚ö†Ô∏è B∆Ø·ªöC 1: ƒêI·ªÄN TH√îNG TIN C·ª¶A B·∫†N V√ÄO ƒê√ÇY ---
AURA_URI = "neo4j+s://70915764.databases.neo4j.io"
AURA_USER = "neo4j"
AURA_PASSWORD = "Lxe23lDlLrKWtl-GI_Ui0jtO5ndvSUU2_wwwjb0X2sg"
# --------------------------------------------------

# ƒê∆∞·ªùng d·∫´n file d·ªØ li·ªáu
BASE_PATH = '../../data/processed/'
JSON_NODES_IN = os.path.join(BASE_PATH, 'network_nodes_full.json')
JSON_RELS_IN = os.path.join(BASE_PATH, 'network_relationships_full.json')

# --- C√ÅC C√ÇU L·ªÜNH CYPHER (ƒê√öNG) ---
# C√°c c√¢u l·ªánh Cypher n√†y l√† ƒê√öNG v√† kh√¥ng c·∫ßn thay ƒë·ªïi,
# v√¨ ch√∫ng ta s·∫Ω s·ª≠a ƒë·ªïi d·ªØ li·ªáu Python *tr∆∞·ªõc khi* g·ª≠i ƒëi.

CYPHER_CREATE_CONSTRAINTS = """
CREATE CONSTRAINT unique_entity_title IF NOT EXISTS
FOR (n:ThucThe) REQUIRE (n.title) IS UNIQUE;
"""

CYPHER_UPLOAD_NODES = """
UNWIND $nodes_list AS node
MERGE (n:ThucThe {title: node.title})
ON CREATE SET
    n.page_id = node.page_id,
    n.infobox = node.infobox
WITH n, node
CALL apoc.create.addLabels(n, [node.label]) YIELD node AS result
RETURN count(result) AS count
"""

CYPHER_UPLOAD_RELS = """
UNWIND $rels_list AS rel
MATCH (a:ThucThe {title: rel.source})
MATCH (b:ThucThe {title: rel.target})
CALL apoc.create.relationship(a, rel.type, {}, b) YIELD rel AS result
RETURN count(result) AS count
"""

def upload_graph_to_aura(uri, user, password, nodes_list, rels_list):
    """
    K·∫øt n·ªëi v·ªõi Neo4j Aura v√† upload to√†n b·ªô d·ªØ li·ªáu.
    """
    try:
        driver = GraphDatabase.driver(uri, auth=(user, password))
        driver.verify_connectivity()
        print("ƒê√£ k·∫øt n·ªëi v·ªõi Neo4j Aura.")
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi Aura: {e}")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i AURA_URI, AURA_USER, AURA_PASSWORD.")
        return

    with driver.session(database="neo4j") as session:
        
        # print("ƒêang t·∫°o constraint (kh√≥a ch√≠nh)...")
        # try:
        #     session.run(CYPHER_CREATE_CONSTRAINTS)
        #     print(" > Constraint ƒë√£ ƒë∆∞·ª£c t·∫°o.")
        # except Exception as e:
        #     print(f"L·ªói khi t·∫°o constraint: {e}")
        #     driver.close()
        #     return
        
        print("ƒêang upload c√°c Nodes...")
        try:
            result = session.run(CYPHER_UPLOAD_NODES, nodes_list=nodes_list)
            print(f" > ƒê√£ upload {result.single()['count']} nodes.")
        except Exception as e:
            print(f"LOKHI UPLOAD NODES: {e}") # S·ª≠a l·ªói ch√≠nh t·∫£
            driver.close()
            return

        print("ƒêang upload c√°c Relationships...")
        try:
            result = session.run(CYPHER_UPLOAD_RELS, rels_list=rels_list)
            print(f" > ƒê√£ upload {result.single()['count']} relationships.")
        except Exception as e:
            print(f"L·ªói khi upload relationships: {e}")

    driver.close()

if __name__ == "__main__":
    print("--- üöÄ B·∫Øt ƒë·∫ßu upload graph l√™n Neo4j Aura ---")

    if AURA_URI == "neo4j+s://your-database-uri.databases.neo4j.io":
        print("="*50)
        print("‚ÄºÔ∏è L·ªñI: B·∫°n ch∆∞a ƒëi·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p.")
        print("Vui l√≤ng m·ªü file 'upload_to_aura.py' v√† ƒëi·ªÅn")
        print("AURA_URI, AURA_USER, v√† AURA_PASSWORD ·ªü ƒë·∫ßu file.")
        print("="*50)
    else:
        try:
            with open(JSON_NODES_IN, 'r', encoding='utf-8') as f:
                nodes_list = json.load(f)
            with open(JSON_RELS_IN, 'r', encoding='utf-8') as f:
                rels_list = json.load(f)
                
            if not nodes_list or not rels_list:
                print("L·ªói: File JSON node ho·∫∑c relationship b·ªã r·ªóng.")
            else:
                
                # --- PH·∫¶N S·ª¨A L·ªñI ---
                # Chuy·ªÉn ƒë·ªïi infobox (dict) th√†nh (string)
                print(" > ƒêang chu·∫©n b·ªã d·ªØ li·ªáu (Serialization Infobox)...")
                for node in nodes_list:
                    if 'infobox' in node and isinstance(node['infobox'], dict):
                        # Chuy·ªÉn ƒë·ªïi dictionary th√†nh m·ªôt chu·ªói JSON
                        node['infobox'] = json.dumps(node['infobox'], ensure_ascii=False)
                    elif 'infobox' not in node or not isinstance(node['infobox'], str):
                        # ƒê·∫£m b·∫£o thu·ªôc t√≠nh t·ªìn t·∫°i v√† l√† string
                        node['infobox'] = "{}"
                print(" > Chu·∫©n b·ªã d·ªØ li·ªáu ho√†n t·∫•t.")
                # --- K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI ---

                # 3. G·ªçi h√†m upload v·ªõi danh s√°ch node ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
                upload_graph_to_aura(AURA_URI, AURA_USER, AURA_PASSWORD, nodes_list, rels_list)
                print("\n--- üéâ Ho√†n t·∫•t! D·ªØ li·ªáu c·ªßa b·∫°n ƒë√£ c√≥ tr√™n cloud. ---")

        except FileNotFoundError:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu t·∫°i '{JSON_NODES_IN}' ho·∫∑c '{JSON_RELS_IN}'")
            print("Vui l√≤ng ch·∫°y script 'build_full_network.py' tr∆∞·ªõc.")
        except Exception as e:
            print(f"ƒê√£ x·∫£y ra l·ªói: {e}")